=head1 NAME

perlsec - Seguridad en Perl

=head1 DESCRIPCIÓN

Perl se diseñó para que fuera fácil programar con seguridad incluso cuando se ejecuta con privilegios extra, como programas setuid o setgid.  A diferencias de otros shell de líneas de comandos, que se basan en múltiples pases de sustitución de cada línea del I<script>, Perl usa un esquema de evaluación más convencional, con menos tocones escondidos.  De forma adicional, debido a que el lenguaje tiene más funcionalidad incrustada, puede depender menos de programas externos (y posiblemente menos confiables) para cumplir con sus propósitos.

=head1 INFORMACIÓN DE CONTACTO SOBRE VULNERABILIDAD DE SEGURIDAD

Si cree que ha encontrado una vulnerabilidad de seguridad en Perl, por favor, envíe un correo electrónico con todos los detalles a perl5-security-report@perl.org. Esto crea un tique Request Tracker en una cola especial que no está accesible públicamente. El correo se copiará, además, a una lista de correo de suscripción cerrada y no archivada, que incluye a todos los participantes principales, que podrán ayudar a evaluar el impacto de los problemas, encontrar una resolución, y ayudar a coordinar la liberación de parches para mitigar o solucionar el problema en todas las plataformas en las que Perl se soporte. Por favor, utilice sólo esta dirección para problemas de seguridad en el núcleo de Perl, no para los módulos distribuidos de forma independiente en CPAN.

Cuando envíe una petición inicial a la dirección de correo sobre seguridad, por favor, no mande copia a otras terceras partes, porque si responden a todos, la respuesta generará un nuevo tique. Una vez que reciba la respuesta inicial con un número de tique C<[perl #NNNNNN]> en la cabecera, es correcto enviar copias de las sucesivas respuestas: todos los correos enviados a la dirección de perl5-security-report con el número de tique en la línea del asunto se añadirán al tique; sin el, se creará un nuevo tique.

=head1 PRECAUCIONES Y MECANISMOS DE SEGURIDAD

=head2 Modo de contaminación (I<Taint>)

Perl, automáticamente, activa un conjunto de comprobaciones especiales de seguridad, llamado modo contaminación (I<taint mode>), cuando detecta que el programa que está ejecutando tiene un número de identificación de usuario o de grupo, distinto del usuario actual y del efectivo.  El bit setuid en los permisos Unix es el modo 04000, el bit setgid es el modo 02000; pueden estar establecidos cualquiera de los dos o los dos a la vez.  También puede activar el modo de contaminación de forma explícita usando la opción de línea de comandos B<-T>.  Se sugiere I<fuertemente> usar esta opción para los programas de servidor, y cualquier programa que se ejecute en nombre de cualquier otro, como es el caso de un script CGI.  Una vez que se active el modo de contaminación, queda así para el resto de su script.

Mientras se esté en este modo, Perl toma precauciones especiales que se llaman comprobaciones contaminadas (I<taint checks>) para impedir trampas, tanto las obvias como las sutiles.  Algunas de estas comprobaciones son razonablemente simples, tales como verificar que la ruta de los directorios no son modificables por otros usuarios; los programadores cuidadosos siempre usan comprobaciones como estas.  Otras comprobaciones, sin embargo, están mejor soportadas por el propio lenguaje, y son precisamente estas comprobaciones las que contribuyen a hacer de un programa Perl, con bits de I<set-id>, un programa más seguro que el correspondiente programa escrito en C.

No puede usar datos derivados del exterior de su programa que afecten a cualquier cosa que no esté en el exterior del programa -como mínimo, no por accidente-.  Se marca como "contaminados" todos los argumentos de la línea de comandos, variables de entorno, información de la configuración regional (vea L<perllocale>), resultados de ciertas llamadas del sistema (C<readdir()>, C<readlink()>, la variable de C<shmread()>, los mensajes devueltos por C<msgrcv()>, la contraseña, los campos gcos y shell devueltos por la llamada C<getpwxxx()>), y toda entrada proveniente de archivos.
Los datos contaminados no se pueden usar directamente o indirectamente en ningún comando que invoque un sub-shell, ni ningún comando que modifique archivos, directorios o procesos, B<con las siguientes excepciones>:

=over 4

=item *

B<No> se comprueba la contaminación de los argumentos de C<print> y C<syswrite>.

=item *

Métodos simbólicos

    $obj->$metodo(@args);

y referencias simbólicas a subrutinas

    &{$foo}(@args);
    $foo->(@args);

no se comprueba si están contaminadas.  Esto requiere un cuidado extra a menos que quiera que datos externos afecten a su flujo de control.  A menos que limite cuidadosamente estos valores simbólicos, la gente es capaz de llamar a funciones B<fuera> de su código Perl, tales como POSIX::system, en cuyo caso serán capaces de ejecutar código externo arbitrario.

=item *

Las claves de los hash B<nunca> se contaminan.

=back

Por razones de eficiencia, Perl toma una vista conservadora de cualquier dato contaminado.  Si una expresión contiene datos contaminados, cualquier subexpresión se puede considerar contaminada, incluso si el valor de la subexpresión no está, en sí mismo, afectado por los datos contaminados.

Debido a que la contaminación se asocia con cada valor escalar, algunos elementos de un array o hash se pueden contaminar, y otros no.
Las claves de un hash B<nunca> se contaminan.

Por ejemplo:

    $arg = shift;		# $arg queda contaminado
    $hid = $arg . 'bar';	# $hid también queda contaminado
    $line = <>;			# Contaminado
    $line = <STDIN>;		# También contaminado
    open FOO, "/home/me/bar" or die $!;
    $line = <FOO>;		# Sigue estando contaminado
    $path = $ENV{'PATH'};	# Contaminado, pero vea más abajo
    $data = 'abc';		# No contaminado

    system "echo $arg";		# Inseguro
    system "/bin/echo", $arg;	# Se considera inseguro
				# (Perl no sabe nada sobre /bin/echo)
    system "echo $hid";		# Inseguro
    system "echo $data";	# Inseguro hasta que se establezca PATH

    $path = $ENV{'PATH'};	# $path ahora está contaminado

    $ENV{'PATH'} = '/bin:/usr/bin';
    delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

    $path = $ENV{'PATH'};	# $path ahora NO está contaminado
    system "echo $data";	# ¡Ahora es seguro!

    open(FOO, "< $arg");	# Bien - archivo de solo lectura
    open(FOO, "> $arg"); 	# Mal - intentando escribir

    open(FOO,"echo $arg|");	# Mal
    open(FOO,"-|")
	or exec 'echo', $arg;	# Tampoco está bien

    $shout = `echo $arg`;	# Inseguro, $shout ahora está contaminado

    unlink $data, $arg;		# Inseguro
    umask $arg;			# Inseguro

    exec "echo $arg";		# Inseguro
    exec "echo", $arg;		# Inseguro
    exec "sh", '-c', $arg;	# ¡Muy inseguro!

    @files = <*.c>;		# inseguro (usa readdir() o similar)
    @files = glob('*.c');	# inseguro (usa readdir() o similar)

    # En cualquier caso, los resultados de glob quedan contaminados, ya que la lista de
    # nombres de archivo llega del exterior del programa.

    $bad = ($arg, 23);		# $bad quedará contaminado
    $arg, `true`;		# Inseguro (aunque realmente no lo sea)

Si intenta hacer algo inseguro, obtendrá un error fatal que dirá algo como "dependencia insegura" o "$ENV{PATH} inseguro".

La excepción al principio de "un valor contaminado contamina a toda la expresión" es para el operador condicional ternario C<?:>.  Ya que el código de una condición ternaria

    $resultado = $valor_contaminado ? "No contaminado" : "También, no contaminado";

es, de forma efectiva

    if ( $valor_contaminado ) {
        $resultado = "No contaminado";
    } else {
        $resultado = "También, no contaminado";
    }

no tiene sentido que C<$resultado> quede contaminado.

=head2 Limpiando y detectando datos contaminados

Para comprobar cuándo una variable contiene datos contaminados, y cuyo uso podría disparar un mensaje "Dependencia insegura", puede usar la función C<tainted()> del módulo Scalar::Util, disponible en su espejo CPAN más cercano, e incluido en Perl a partir de la publicación de v5.8.0.
O quizás quiera usar la siguiente función C<is_tainted()>.

    sub is_tainted {
        local $@;   # No poluciona el valor del llamante.
        return ! eval { eval("#" . substr(join("", @_), 0, 0)); 1 };
    }

Esta función hace uso del hecho que la presencia de datos contaminados en cualquier parte de una expresión deja contaminada a toda la expresión.  Sería ineficiente comprobar la contaminación de todos los argumentos de todos los operadores.  En lugar de eso, se usa una aproximación ligeramente más eficiente y conservadora, que es que si se accede a un valor contaminado dentro de la misma expresión, se considera contaminada toda la expresión.

Pero comprobar la contaminación es la mitad del trabajo.  Algunas veces querrá limpiar la contaminación de sus datos.  Los valores se pueden descontaminar usándolos como claves en un hash; de lo contrario, la única manera de saltarse el mecanismo de contaminación es referenciando subpatrones en una coincidencia con una expresión regular.
Perl presume que si referencia a una subcadena usando $1, $2, etc. en un patrón no contaminado, eso es que usted sabe qué es lo que está haciendo cuando escribió el patrón.  Eso significa, pensando un poco, que no estamos descontaminando ciegamente, o nos estamos cargando todo el invento.  Es mejor verificar que la variable solo tiene caracteres buenos (para ciertos valores de "bueno") en lugar de comprobar si tiene algún carácter malo.  Esto se hace así porque es mucho más fácil olvidarse de caracteres malos de los que nunca haya pensado antes.

Aquí hay un test para asegurarse que los datos no contienen nada más que caracteres "de palabra" (alfabéticos, numéricos, y guiones bajos), un guión y un signo de la arroba o un punto.

    if ($datos =~ /^([-\@\w.]+)$/) {
	$datos = $1; 			# $datos ahora está descontaminado
    } else {
	die "Bad data in '$datos'"; 	# registrar esto en algún lugar
    }

Esto es bastante seguro porque C</\w+/> normalmente no coincide con metacaracteres del shell, ni con un punto, guión, o cualquier otra cosa con un significado especial para el shell.  El uso de C</.+/> habría sido inseguro, en teoría, porque permite pasar todo, pero Perl no lo comprueba.  La lección es que cuando estamos descontaminando, debe ser extremamente cuidadoso con sus patrones.
Limpiar datos usando expresiones regulares es el I<único> mecanismo para descontaminar datos sucios, a menos que use la estrategia detallada antes, de crear un proceso hijo con menores privilegios.

El ejemplo no descontamina C<$datos> si C<use locale> está activo, porque los caracteres que coinciden con C<\w> se determinan por la configuración regional.
Perl considera que las definiciones regionales son poco fiables porque contienen datos del exterior del programa.  Si está escribiendo programas conforme a la configuración regional, y quiere limpiar datos con una expresión regular que contenga C<\w>, ponga C<no locale> antes de la expresión, en el mismo bloque.  Vea L<perllocale/SECURIDAD> para una explicación mas detallada, y ejemplos.

=head2 Opciones en la línea "#!"

Cuando hace que un script sea ejecutable, para hacerlo utilizable como un comando, el sistema pasará las opciones a perl que estén en la #!
línea.  Perl comprueba que cualquier opción desde la línea de comando pasados a un script setuid
(o setgid) coinciden de hecho con los indicados en la #! línea.  Algunos Unix y entornos parecidos imponen un límite de una opción en la #!
línea, así que necesitará usar algo como C<-wU> en lugar de C<-w -U> bajo tales sistemas.  (Este problema debería aparecer solamente en Unix y entornos parecidos que soporten #! y scripts setuid o setgid).

=head2 Modo contaminación y @INC

Cuando el modo contaminación (C<-T>) está en activo, el directorio "." se quita de C<@INC>, y Perl ignora las variables de entorno C<PERL5LIB> y C<PERLLIB>.  Puede seguir ajustando C<@INC> desde el exterior del programa usando la opción de línea de comando C<-I> tal como se explica L<perlrun>.  Se ignoran las dos variables de entorno porque están ocultas, y un usuario ejecutando el programa podría no ser consciente de que están establecidas, mientras que la opción C<-I> es claramente visible y, por lo tanto, permitida.

Otra forma de modificar C<@INC> sin modificar el programa es usando el pragma C<lib>, por ejemplo:

  perl -Mlib=/foo programa

El beneficio de usar C<-Mlib=/foo> sobre C<-I/foo>, es que la primera, I<automágicamente> elimina directorios duplicados, mientras que la última, no.

Note que si una cadena contaminada se añade a C<@INC>, se emitirá el siguiente mensaje informando del problema:

  I<Insecure dependency in require while running with -T switch> (Dependencia insegura en require mientras se ejecuta con la opción -T)

=head2 Limpiando su ruta

Para los mensajes "C<$ENV{PATH}> inseguro", necesita estableces C<$ENV{'PATH'}> a un valor conocido, y cada directorio en la ruta debe ser absoluto y no escribible por otros usuarios distintos del propietario y del grupo.  Puede sorprenderse el recibir este mensaje incluso si la ruta de su ejecutable está totalmente cualificado.  I<No> se genera porque no haya suministrado una ruta completa al programa, sino porque no ha establecido su variables de entorno PATH, o no lo ha hecho a algo que fuera seguro.
Debido a que Perl no puede garantizar que el ejecutable en cuestión vaya a ejecutar otro programa que sea dependiente de su PATH, antes se asegura que usted haya establecido PATH.

PATH no es la única variable de entorno que puede causar problemas.
Debido a que algunos shell pueden usar las variables IFS, CDPATH, ENV y BASH_ENV, Perl comprueba que estas están vacías o descontaminadas cuando inicia subprocesos.  Puede desear añadir algo como esto a sus scripts setid y a los que hay que comprobar su nivel de contaminación.

    delete @ENV{qw(IFS CDPATH ENV BASH_ENV)};   # Hace %ENV más seguro

También es posible tener problemas con otras operaciones a quienes no les preocupa si van a usar valores contaminados.  Haga un uso juicioso de las pruebas de archivo con los nombres de archivo que el usuario proporcione.  Cuando sea posible, haga un I<open> y demás operaciones B<después> de bajar correctamente cualquier privilegio especial del usuario (¡o grupo!).  Perl no le previene de leer archivos contaminados, así que tenga cuidado cuando imprima su contenido.  El mecanismo de contaminación tiene como objetivo prevenir fallos estúpidos, no eliminar la necesidad de pensar.

Perl no llama al shell para expandir los comodines cuando pasa listas explícitas de parámetros a C<system> y C<exec> en lugar de cadenas que puedan contener comodines shell dentro de ellas.  Desafortunadamente, C<open>, C<glob> y las funciones con comillas invertidas no proporcionan tal convención alternativa de llamada, así que se requiere más subterfugios.

Perl proporciona una forma razonablemente segura para abrir un archivo o tubería desde un programa setuid o setgid: simplemente cree un proceso hijo con privilegios reducidos, quien hará el trabajo sucio por usted.  Primero, haga un fork de un hijo usando la sintaxis especial C<open> que conecte el padre y el hijo por medio de una tubería.  Ahora el hijo reinicia su ID de grupo y cualesquiera otros atributos de proceso, como variables de entorno, umask, directorios de trabajo actuales, dejándolos en sus valores originales o valores seguros conocidos.  Entonces, el proceso hijo, que ya no tiene ningún permiso especial, hace el C<open> u otra llamada del sistema.
Finalmente, el hijo pasa los datos que ha gestionado al padre.  Ya que el archivo o tubería se abrió en el hijo mientras se ejecuta con un privilegio más bajo que el padre, no se le puede burlar para que haga algo que no deba.

Aquí hay una manera de ejecutar comillas inversas de una forma razonablemente segura.  Note cómo el C<exec> no se llama con una cadena que el shell podría expandir.  Esto es de lejos la mejor forma de llamar algo que estuviera sujeto a los escapes del shell: nunca llamar al shell.  

        use English;
        die "No puedo hacer fork: $!" unless defined($pid = open(KID, "-|"));
        if ($pid) {           # padre
            while (<KID>) {
                # hacer algo
            }
            close KID;
        } else {
            my @temp     = ($EUID, $EGID);
            my $orig_uid = $UID;
            my $orig_gid = $GID;
            $EUID = $UID;
            $EGID = $GID;
            # Bajar privilegios
            $UID  = $orig_uid;
            $GID  = $orig_gid;
            # Asegurarnos que los privilegios realmente han desaparecido
            ($EUID, $EGID) = @temp;
            die "No puedo bajar los privilegios"
                unless $UID == $EUID  && $GID eq $EGID;
            $ENV{PATH} = "/bin:/usr/bin"; # PATH mínimo.
	    # Considere higienizar aún más el entorno.
            exec 'myprog', 'arg1', 'arg2'
                or die "no puedo ejecutar myprog: $!";
        }

Una estrategia similar sería trabajar para una expansión de patrones por medio de C<glob>, aunque puede usar en cambio C<readdir>.

La comprobación de contaminación es más útil cuando, a pesar de que puede confiarse en no haber escrito un programa que arruine la granja, no necesariamente debe confiar en los que finalmente lo terminarán usando, que pueden intentar aprovecharse de él para hacer algo malo.  Esta es la clase de comprobación de seguridad que es útil para los programas set-id y programas lanzados en nombre de otro usuario, como los programas CGI.

Esto es muy diferente, sin embargo, de ni incluso confiar en el autor del código, que intente hacer algo malo.  Esto es la clase de confianza que se necesita cuando alguien le pone en sus manos un programa que nunca ha visto antes, y dice "Ejecuta esto". Para esta clase de seguridad, podría querer aprender sobre el módulo Safe, incluido en la distribución estándar de Perl.  Este módulo permite al programador establecer compartimientos especiales en que todos los sistemas operativos están atrapados y el acceso al espacio de nombres se controla de forma muy cuidadosa.  A pesar de eso, Safe no debería considerarse a prueba de balas: no impedirá que el código externo establezca bucles infinitos, asignar gigabytes de memoria, o incluso aprovecharse de errores perl para hacer que el intérprete del servidor se cuelgue o se comporte de forma imprevisible.  En cualquier caso, es mejor evitarlo completamente si realmente está preocupado por la seguridad.

=head2 Errores de seguridad

Más allá de los problemas obvios que se originan de los privilegios especiales a sistemas tan flexibles como los scripts, en muchas versiones de Unix, los scripts set-id son inherentemente inseguros por principio.  El problema es una condición de carrera en el kernel.  Entre el tiempo en que el kernel abre el archivo para ver qué intérprete debe ejecutar, y cuando el intérprete (ahora con set-id) vuelve a abrir el archivo para interpretarlo, el archivo en cuestión puede haber cambiado, especialmente si en su sistema existen los enlaces simbólicos.

Afortunadamente, algunas veces esa "característica" del kernel se puede desactivar.
Desafortunadamente, existen dos maneras para desactivarlo.  El sistema puede, simplemente, marcar como ilegales los scripts que tengan establecido cualquier bit set-id, que no ayuda mucho.
De forma alternativa, puede, simplemente, ignorar los bits set-id en los scripts.

Sin embargo, si no está desactivada la característica del kernel de los script set-id, Perl se quejará sonoramente de que su script set-id es inseguro.  Necesitará, tanto desactivar la característica del kernel del script set-id, o poner un envoltorio C sobre el script.  Un envoltorio C es solo un programa compilado que no hace nada excepto llamar a su programa Perl.   Los programas compilados no están sujetos al error del kernel que apesta los scripts set-id.  Aquí hay un simple envoltorio, escrito en C:

    #define REAL_PATH "/ruta/al/script"
    main(ac, av)
	char **av;
    {
	execv(REAL_PATH, av);
    }

Compile este envoltorio en un binario ejecutable, y entonces póngale setuid o setgid a I<él> en lugar de a su script.

En los últimos años, los vendedores han comenzado a suministrar sistemas libres de este error de seguridad.  En tales sistemas, cuando el kernel pasa el nombre de un script set-id para abrir el intérprete, en lugar de usar el nombre de una ruta, sujeto a problemas, en lugar de eso pasa I</dev/fd/3>.  Es un archivo especial que ya está abierto en el script, así que no existe una condición de carrera para que los scripts malignos la exploten.  En estos sistemas, Perl debería compilarse con C<-DSETUID_SCRIPTS_ARE_SECURE_NOW>.  El programa F<Configure> que compila Perl intenta adivinarlo por sí mismo, así que nunca tendría que especificarlo.  La mayor parte de las versiones de SysVr4 y BSD 4.4 esa esta aproximación para evitar la condición de carrera del kernel.

=head2 Proteger su programa

Existe un número de formas de esconder el código fuente de sus programas Perl, con diferentes niveles de "seguridad".

Antes de nada, I<no> puede quitar los permisos de lectura, porque el código fuente debe ser leíble para que se pueda compilar e interpretar.  (Sin embargo, eso no significa que el código fuente de un script CGI sea leíble por usuarios web).  Así que deje los permisos en el socialmente amistoso nivel de 0755.  Esto solo permite, a los demás, en su sistema local, ver su código.

Algunos personas consideran equivocadamente que eso es un problema de seguridad.  Si su programa hace cosas inseguras, y confía en personas que no saben cómo explotar esas vulnerabilidades, entonces no es seguro.  A menudo es posible para cualquiera determinar la inseguridad de las cosas y explotarlas sin ver el código fuente.  Seguridad por medio de la oscuridad, escondiendo el nombre de sus errores en lugar de arreglarlos es, de hecho, poca seguridad.

Puede intentar usar codificación por medio de filtros de código fuente (Filter::* en CPAN, o Filter::Util::Call y Filter::Simple desde Perl 5.8).
Pero los intrusos podrían ser capaces de descodificarlo.  Puede intentar usar el compilador e intérprete de I<bytecode> descrito más abajo, pero los intrusos podrían ser capaces de descompilarlo.  Puede intentar usar un compilador de código nativo descrito más abajo, pero los intrusos podrían ser capaces de desensamblarlo.  Todo esto aporta varios grados de dificultad para las personas que esperan obtener su código, pero, definitivamente, ninguna de ellas lo puede encubrir (esto es para todos los lenguajes, no solo Perl).

Si está preocupado porque haya gente que quiera aprovecharse de su código, entonces hay que subrayar que no hay nada que le dé una seguridad legal salvo una licencia restrictiva.  Licencie su software y sazónelo con declaraciones amenazantes como "Esto es un software propietario inédito de XYZ Corp.
El acceso a él no le da permiso para usarlo, bla, bla, bla". Debería ver a un abogado para asegurarse que la redacción de su licencia sea completamente legal.

=head2 Unicode

Unicode es una nueva y compleja tecnología y uno puede, fácilmente, pasar por alto ciertas trampas de seguridad.  Vea L<perluniintro> para una visión general y L<perlunicode> para los detalles, y L<perlunicode/"Implicaciones de seguridad de Unicode"> para las implicaciones particulares en temas de seguridad.

=head2 Ataques de complejidad algorítmica

Ciertos algoritmos internos utilizados en la implementación de Perl pueden atacarse eligiendo una entrada cuidadosa para que consuma grandes cantidades, tanto de tiempo, espacio, o de ambos.  Esto puede llevar a los tan famosos ataques I<Denial of Service> (DoS, denegación de servicio).

=over 4

=item *

Algoritmo Hash: De los algoritmos Hash, como el que se usa en Perl, es bien sabido que son vulnerables a ataques de colisión en su función hash.
Tales ataques implican construir un conjunto de claves que colisionen en la misma cubeta, producción un comportamiento ineficiente.  Tales ataques a menudo dependen del descubrimiento de la semilla de la función hash utilizadas para mapear claves a cubetas.  Esa semilla se usa entonces para sacar, por fuerza bruta un conjunto de claves que se pueden usar para montar un ataque de denegación de servicio.  En Perl 5.8.1 se introdujeron cambios para endurecer tales ataques, y entonces, más tarde, en Perl 5.18.0 estas características se mejoraron y se añadieron protecciones adicionales.

En el momento de escribir esto, se considera que Perl 5.18.0 está bien protegido contra ataques de complejidad algorítmica en su implementación hash.  Esto es en gran parte debido a las siguiente medidas que mitigan los ataques:

=over 4

=item Aleatorización de la semilla Hash

Para hacer imposible saber qué semilla generar en un conjunto de claves, esa semilla se inicializa de forma aleatoria al arrancar el proceso.  Esto se puede ajustar usando la variable de entorno PERL_HASH_SEED; vea L<perlrun/PERL_HASH_SEED>.  Esta variable de entorno controla cómo se almacenan los elementos, no cómo se presentan por medio de C<keys>, C<values> y C<each>.

=item Aleatorización de la travesía Hash

Independientemente de qué semilla se use en la función hash, C<keys>, C<values> y C<each> devuelven los elementos en un orden aleatorio dependiente del hash.
Al modificar un hash por medio de una inserción cambiará el orden de la iteración del hash.
Este comportamiento se puede ajustar usando la función C<hash_traversal_mask()> del módulo 
L<Hash::Util> o usando la variable de entorno PERL_PERTURB_KEYS; vea L<perlrun/PERL_PERTURB_KEYS>.  Note que esa característica controle el orden "visible" de las claves, y no el orden real en que están almacenadas.

=item Perturbación del orden de las cubetas

Cuando los elementos colisionan en una determinada cubeta hash, en Perl 5.18 ya no es previsible el orden en que se almacenan en las cadenas.  Esto tiene la intención de hacer más difícil observar una colisión.  Este comportamiento se puede ajustar usando la variable de entorno PERL_PERTURB_KEYS; vea L<perlrun/PERL_PERTURB_KEYS>.

=item Nueva función Hash por defecto

La función hash por defecto se ha modificado con la intención de hacer difícil inferir la semilla hash.

=item Funciones Has alternativas

El código fuente incluye la posibilidad de elegit de entre múltiple algoritmos hash.  Mientras que nosotros creemos que el hash perl por defecto es robusto frente a un ataque, hemos incluido la función hash Siphash como último recurso.  En el momento de la publicación de Perl 5.18.0, se cree que Siphash es criptográficamente robusto.  No es la función por defecto, ya que es mucho más lenta que la función hash por defecto.

=back

Sin compilar un Perl especial, no hay forma de obtener el mismo comportamiento exacto de ninguna versión anterior a Perl 5.18.0.  El más cercano que podemos obtener es establecer PERL_PERTURB_KEYS a 0 y establecer PERL_HASH_SEED a un valor conocido.  No aconsejamos establecer estas variables para un uso en producción debido a las consideraciones de seguridad anteriores.

B<Perl nunca ha garantizado ningún tipo de ordenación de las claves de un hash>, y esa ordenación ya ha cambiado varias veces a lo largo de la vida útil de Perl 5.  También, la ordenación de las claves hash siempre ha sido, y continúa siendo, afectada por el orden de inserción y la historia de cambios realizados en el hash a lo largo de su tiempo de vida.

También tenga en cuenta que mientras el orden de los elementos hash se puede aleatorizar, este "pseudo-orden" B<no> debería usarse para aplicaciones como barajas una lista de forma aleatoria (use C<List::Util::shuffle()> para esto, vea L<List::Util>, un módulo incluida en la distribución estándar desde Perl 5.8.0; o el módulo de CPAN C<Algorithm::Numerical::Shuffle>), o para generar permutaciones (use, por ejemplo, los módulos de CPAN C<Algorithm::Permute> o C<Algorithm::FastPermute>), o para cualquier aplicación criptográfica.

Los Hashes enlazados pueden tener sus propios ordenaciones y ataques de complejidad algorítmica.

=item *

Expresiones regulares: al motor de expresiones regulares se le llama NFA (I<Non-deterministic Finite Automaton> -autómata finito no-determinista), que significa que, aparte de otras cosas, que puede consumir grandes cantidades de tiempo y espacio si la expresión regular puede coincidir de varias formas.  Una construcción cuidadosa de las expresiones regulares puede ayudar pero, frecuentemente, no se puede hacer mucho (es obligatoria la lectura del libro "I<Mastering Regular Expressions>", vea L<perlfaq2>).  Quedarse sin memoria lo manifiesta el propio Perl al quedarse sin memoria.

=item *

Ordenar: el algoritmo quicksort que se usa en Perl antes de 5.8.0 para implementar la función sort() es muy fácil de engañar para que consuma un tiempo excesivo.  A partir de Perl 5.8.0 se usa por defecto un algoritmo de ordenación diferente, mergesort.  No se puede engañar a Mergesort, para toda entrada a la función.

=back

Vea L<http://www.cs.rice.edu/~scrosby/hash/> para más información, y cualquier libro de texto de informática, sobre complejidad algorítmica.

=head1 VEA TAMBIÉN

L<perlrun>, para su descripción de cómo limpiar variables de entorno.
